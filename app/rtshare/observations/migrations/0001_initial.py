# Generated by Django 5.0 on 2024-06-14 23:20

import django.core.files.storage
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [

    ]

    operations = [
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact time when a record was created.')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact time when a record was last updated.')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, help_text='The unique identifier for this record.', unique=True)),
                ('name', models.CharField(help_text='The human-recognizable name for the device.', max_length=256)),
                ('start_at', models.DateTimeField(blank=True, help_text='When the given observation should begin?', null=True)),
                ('end_at', models.DateTimeField(blank=True, help_text='When the given observation should begin?', null=True)),
                ('telescopes', models.ManyToManyField(help_text='The telescopes that are involved in the observation and collection of data.', related_name='observations', to='telescope.telescope')),
            ],
            options={
                'ordering': ('-start_at', '-end_at'),
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact time when a record was created.')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact time when a record was last updated.')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, help_text='The unique identifier for this record.', unique=True)),
                ('name', models.CharField(help_text='The human-recognizable name for the observation configuration.', max_length=256)),
                ('frequency', models.PositiveBigIntegerField(default=89500000, help_text='The center frequency to capture (in Hz).')),
                ('sample_rate', models.PositiveBigIntegerField(default=2048000, help_text='The sample rate at which to collect data.')),
                ('sample_size', models.PositiveBigIntegerField(default=1024, help_text='How many data points to collect per sample.')),
                ('ppm', models.PositiveSmallIntegerField(default=0, help_text='What PPM offset to use for the device (0 is none).')),
                ('gain', models.PositiveSmallIntegerField(default=0, help_text='The amount of gain to apply via the SDR.', validators=[django.core.validators.MaxValueValidator(100)])),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='observations.observation')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact time when a record was created.')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The exact time when a record was last updated.')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, help_text='The unique identifier for this record.', unique=True)),
                ('frequency', models.PositiveBigIntegerField(blank=True, default=None, help_text='The center frequency that was captured (in Hz).', null=True)),
                ('sample_rate', models.PositiveBigIntegerField(blank=True, default=None, help_text='The sample rate at which data was collected.', null=True)),
                ('sample_size', models.PositiveBigIntegerField(blank=True, default=None, help_text='The number of samples in the record.', null=True)),
                ('ppm', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The PPM offset used for the device (0 is none).', null=True)),
                ('gain', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The amount of gain applied to the SDR.', null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('captured_at', models.DateTimeField(blank=True, default=None, help_text='The timestamp when the data was collected.', null=True)),
                ('data', models.FileField(storage=django.core.files.storage.FileSystemStorage(), upload_to='starsweep/data/')),
                ('configuration', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='samples', to='observations.configuration')),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='samples', to='observations.observation')),
                ('telescope', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='samples', to='telescope.telescope')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
    ]
